package org.ogleh.imagedemo.images;

import org.springframework.web.multipart.MultipartFile;

import java.io.File;
import java.io.IOException;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.Objects;

public class FileStorage {
//    private final String candidatePath = ImagePath.CANDIDATE_PATH + "/";

    public static String addFile(MultipartFile file, String filePath) throws IOException {

        File directory = new File(filePath);

        if (!directory.exists()) {
            directory.mkdirs();
        }

        file.transferTo(new File(directory, Objects.requireNonNull(file.getOriginalFilename())));

        return filePath;
    }


    private boolean isPathExist(String filePath) {

        Path path = Paths.get(filePath);

        if (path.toFile().exists()) {
            return true;
        }
        return false;
    }
}



package org.ogleh.imagedemo.arrange.services;

import lombok.RequiredArgsConstructor;
import org.ogleh.imagedemo.arrange.entities.StudentProfile;
import org.ogleh.imagedemo.arrange.repo.StudentProfileRepository;
import org.ogleh.imagedemo.images.FileStorage;
import org.ogleh.imagedemo.images.ImagePath;
import org.ogleh.imagedemo.images.Storage;
//import org.ogleh.imagedemo.new_.ImageService;
import org.springframework.stereotype.Service;
import org.springframework.web.multipart.MultipartFile;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.Optional;
import java.util.UUID;

@Service
@RequiredArgsConstructor
public class StudentProfileService {
    private final StudentProfileRepository studentProfileRepository;
    private final String candidateFilePath = ImagePath.CANDIDATE_PATH.getPath() + "/";

    public String save(MultipartFile image) throws IOException {
        if (!image.isEmpty()) {
            return FileStorage.addFile(image, candidateFilePath);
        }
//.
        return null;
    }

    public byte[] downloadImageFromFileSystem(String fileName) throws IOException {
//        Optional<StudentProfile> fileData = studentProfileRepository.findByProfileUrl(ImagePath.CANDIDATE_PATH + "/" + fileName);
//        String filePath = fileData.get().getProfileUrl();
//        FileStorage
        byte[] images = Files.readAllBytes(new File(filePath).toPath());
        return images;
    }

//    public byte[] getImage(String profilePath) throws IOException {
//        Optional<StudentProfile> profileUrl = studentProfileRepository.findByProfileUrl(profilePath);
//
//
//        if (profileUrl.isEmpty()) {
//            throw new FileNotFoundException("File not found: " + profileUrl);
//        }
//
//        String filePath = ImagePath.CANDIDATE_PATH.getPath() + "/" + profileUrl.get().getProfileUrl();
//
//        System.out.println("File path: " + filePath);
//
//        Path path = Paths.get(profileUrl.get().getProfileUrl());
//
//        System.out.println(path);
//        if (!Files.exists(path)) {
//            throw new FileNotFoundException("File not found on filesystem: " + filePath);
//        }
//
//        System.out.println(profileUrl);
//
//        return Files.readAllBytes(path);
//
////        if (profileUrl.isEmpty()) {
////            throw new FileNotFoundException("File not found: " + profilePath);
////        }
//////        String filePath = ImagePath.CANDIDATE_PATH.getPath() + "/" + fileData.get().getProfileUrl();
////
////        String filePath = profileUrl.get().getProfileUrl();
////
////        Path path = Paths.get(filePath);
////
////        if (!Files.exists(path)) {
////            throw new FileNotFoundException("File not found in directory: " + filePath);
////        }
////
////        System.out.println(profileUrl);
////        return Files.readAllBytes(path);
//    }
}




package org.ogleh.imagedemo.arrange.services;

import lombok.RequiredArgsConstructor;
import org.ogleh.imagedemo.arrange.entities.Students;
//import org.ogleh.imagedemo.arrange.repo.StudentRepo;
//import org.ogleh.imagedemo.new_.ImageService;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.multipart.MultipartFile;

import java.io.IOException;
import java.util.Optional;

@Service
@RequiredArgsConstructor
public class StudentService {
//    private final StudentRepo studentRepo;
    private final StudentProfileService profileService;

//    @Transactional
//    public void createStudent(Students student, MultipartFile image) throws IOException {
//        String profilePath = null;
//        if (!image.isEmpty()) {
//            profilePath = profileService.save(image);
//        }
//        student.setProfile(profilePath);
//        studentRepo.save(student);
//    }

//    public Students getStudentById(int studentId) {
//        Optional<Students> studentOptional = studentRepo.findById(studentId);
//        return studentOptional.orElse(null);
//    }

}
package org.ogleh.imagedemo.arrange.controllers;

import lombok.RequiredArgsConstructor;
import org.ogleh.imagedemo.arrange.entities.StudentProfile;
import org.ogleh.imagedemo.arrange.services.StudentProfileService;
import org.ogleh.imagedemo.images.ImagePath;
import org.ogleh.imagedemo.images.Storage;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import java.io.File;
import java.io.IOException;

@RestController
@RequestMapping("/profile")
@RequiredArgsConstructor
public class StudentProfileController {

    private final StudentProfileService studentProfileService;

    //    @GetMapping("/fileSystem/{fileName}")
//    public ResponseEntity<?> downloadImageFromFileSystem(@PathVariable String fileName) throws IOException {
//        byte[] imageData=studentProfileService.downloadImageFromFileSystem(fileName);
//        return ResponseEntity.status(HttpStatus.OK)
//                .contentType(MediaType.valueOf("image/png"))
//                .body(imageData);
//
//    }
//    @GetMapping("/{path}")
//    public ResponseEntity<?> downloadImageFromFileSystem(@PathVariable String path) throws IOException {
//        System.out.println(path);
//        byte[] imageData = studentProfileService.downloadImageFromFileSystem(path);
//                return ResponseEntity.status(HttpStatus.OK)
//                .contentType(MediaType.valueOf("image/png"))
//                .body(imageData);
//
//    }


    @PostMapping("/create")
    public String createImage(@RequestParam("image") MultipartFile image) throws IOException {
        return studentProfileService.save(image);
    }

    @GetMapping("/{path}")
    public ResponseEntity<?> downloadImageFromFileSystem(@PathVariable String path) throws IOException {
        System.out.println(path);
        byte[] imageData = studentProfileService.downloadImageFromFileSystem(path);
        return ResponseEntity.status(HttpStatus.OK)
                .contentType(MediaType.valueOf("image/png"))
                .body(imageData);
    }

//
//    @GetMapping("/{path}")
//    public static boolean isPathExists(@PathVariable String path) {
//        return Storage.isPathExists(path);
//    }
}




package org.ogleh.imagedemo.arrange.controllers;

import lombok.RequiredArgsConstructor;
import org.ogleh.imagedemo.arrange.entities.Students;
import org.ogleh.imagedemo.arrange.services.StudentService;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

@RestController
@RequestMapping("/student")
@RequiredArgsConstructor
public class StudentController {
    private final StudentService studentService;

//    @PostMapping("/create")
//    public ResponseEntity<?> createStudent(@ModelAttribute Students students, @RequestParam("image") MultipartFile image) {
//        try {
//            studentService.createStudent(students, image);
//            return ResponseEntity.status(HttpStatus.CREATED).build();
//        } catch (Exception e) {
//            return new ResponseEntity<>(e.getMessage(), HttpStatus.BAD_REQUEST);
//        }
//    }
//
//    @GetMapping("/{id}")
//    public Students getStudents(@PathVariable int id) {
//        Students studentById = studentService.getStudentById(id);
//        System.out.println(studentById);
//        return studentById;



//    }

}

